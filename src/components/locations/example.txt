import { ErrorMessage, Field } from "formik";
import { ChangeEvent, createRef, forwardRef, RefObject, useRef, useState } from "react";
import { states, cities, districts } from "../../utils/locations";
import { FormikSelectInput } from "../forms_v2/Inputs";

const Locations = () => {
  const [errorLocation, setErrorLocation] = useState<boolean>(false);

  const [state, setState] = useState({
    id: "",
    name: "",
  });
  const [city, setCity] = useState({
    id: "",
    id_state: "",
    name: "",
  });
  const [district, setDistrict] = useState({
    id: "",
    name: "",
  });

  const stateRef = useRef<HTMLSelectElement>(null);
  const cityRef = useRef<HTMLSelectElement>(null);
  const districtRef = createRef();

  const handleChange = (ref: RefObject<HTMLSelectElement>, type: string) => {
    console.log('123');
    if (ref.current !== null) {
      const index = ref.current.selectedIndex;
      const selected = ref.current.options[index];
      if (index !== 0) {
        if (type === "state") {
          setCity({
            id: "",
            id_state: "",
            name: "",
          });

          setDistrict({
            id: "",
            name: "",
          });

          setState({
            ...state,
            id: selected.value,
            name: selected.text,
          });
        }
        if (type === "city") {
          setDistrict({
            id: "",
            name: "",
          });

          setCity({
            ...city,
            id: selected.value,
            id_state: state.id,
            name: selected.text,
          });
        }
        if (type === "district") {
          setDistrict({
            ...district,
            id: selected.value,
            name: selected.text,
          });
        }
      }
    }
  };

  const cambiarEstados = (e: ChangeEvent<HTMLSelectElement>) => {
    const index = e.target.selectedIndex;
    const selected = e.target.options[index];
    // console.log(e.target.selectedIndex);
    // console.log(e.target.options[index].text)
    setCity({
      id: "",
      id_state: "",
      name: "",
    });

    setDistrict({
      id: "",
      name: "",
    });

    setState({
      ...state,
      id: selected.value,
      name: selected.text,
    });
  }

  const cambiarCiudades = (e: ChangeEvent<HTMLSelectElement>) => {
    const index = e.target.selectedIndex;
    const selected = e.target.options[index];
    setDistrict({
      id: "",
      name: "",
    });

    setCity({
      ...city,
      id: selected.value,
      id_state: state.id,
      name: selected.text,
    });
  }

  const cambiarDistritos = (e: ChangeEvent<HTMLSelectElement>) => {
    const index = e.target.selectedIndex;
    const selected = e.target.options[index];
    setDistrict({
      ...district,
      id: selected.value,
      name: selected.text,
    });
  }

  return (
      <>
        <div className="ch-ff__field">
          <label htmlFor="state">Departamento (*)</label>
          <Field
            as="select"
            label="Departamento"
            name="state"
            id="state"
            ref={districtRef}
          >
            <option value="0">Selecciona</option>
            {states
              ? states.map((state, index) => (
                  <option key={index} value={state.id}>
                    {state.name}
                  </option>
                ))
              : null}
          </Field>
          <ErrorMessage name="state" component="p" className="input---error" />
        </div>
        <div className="ch-ff__field">
          <label htmlFor="city">Provincia (*)</label>
          <Field
            as="select"
            id="city"
            name="city"
            onChange={cambiarCiudades}
          >
            <option value="0">Selecciona</option>
            {cities.map((city, index) => {
              if (city.id_state === state.id) {
                return (
                  <option key={index} value={city.id}>
                    {city.name}
                  </option>
                );
              } else {
                return null;
              }
            })}
          </Field>
          <ErrorMessage name="city" component="p" className="input---error" />
        </div>
        <div className="ch-ff__field">
          <label htmlFor="district">Distrito (*)</label>
          <Field
            as="select"
            name="district"
            id="district"
            onChange={ cambiarDistritos}
          >
            <option value="">Selecciona</option>
            {districts.map((district, index) => {
              if (
                district.codeCity === city.id &&
                district.codeState === state.id
              ) {
                return (
                  <option key={index} value={district.id}>
                    {district.name}
                  </option>
                );
              } else {
                return null;
              }
            })}
          </Field>
          <ErrorMessage name="district" component="p" className="input---error" />
        </div>
      </>
    )
};
export default Locations;
